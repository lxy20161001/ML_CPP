//
// Created by john on 2018-10-16.
//

#ifndef NEW_ML_CPP_SIMP_LINEAR_REG_H
#define NEW_ML_CPP_SIMP_LINEAR_REG_H



#include "Numpy_Cpp.h"
#include <iostream>

using namespace std;

template<typename T>
T mse_test(MinVector<T> y_predict, MinVector<T> Y_test) {
    Numpy_Cpp<T> np;
    return np.sum((y_predict - Y_test)._pow()) / Y_test._size();
}

template<typename T>
T rmse_test(MinVector<T> y_predict, MinVector<T> Y_test) {
    return sqrt(mse_test(y_predict, Y_test));
}

template<typename T>
T mae_test(MinVector<T> y_predict, MinVector<T> Y_test) {
    Numpy_Cpp<T> np;
    return np.sum(y_predict.__abs_sub__(Y_test))/Y_test._size() ;
}

template<typename T>
T r2_score(MinVector<T> y_predict, MinVector<T> Y_test) {
    Numpy_Cpp<T> np;
    return 1 - mse_test(y_predict, Y_test) /  np.var(Y_test);
}


template <typename T>
class sim_Linear_Reg{
private:
    MinVector<T> x;
    MinVector<T> y;

public:
    T a,b;

public:
    sim_Linear_Reg(MinVector<T> x,MinVector<T> y):x(x),y(y){

    }

    sim_Linear_Reg fit() {
        Numpy_Cpp<T> np;

        auto x_mean = np.mean(x);
        auto y_mean = np.mean(y);

        T num = 0.0;
        T d = 0.0;

        for (int i = 0; i < x._size(); ++i) {
            num += (x[i] - x_mean) * (y[i] - y_mean);
            d += pow((x[i] - x_mean), 2);
        }

        this->a = num / d;

        this->b = y_mean - a * x_mean;

        return *this;
    }

    MinVector<T> predict(MinVector<T> x_predict) {
        vector<T> array(x_predict._size());
        auto size = x_predict._size();
        for (int i = 0; i < size; ++i) {
            array[i] = this->_predict(x_predict[i]);
        }

        return MinVector<T>(array);
    }

    T score(MinVector<T> x_test, MinVector<T> y_test) {
        auto y_predict = this->predict(x_test);
        return r2_score(y_predict, y_test);
    }

private:
    T _predict(T x_single) {
        return this->a * x_single + this->b;
    }
};


template <typename T>
class LinearRegression{
public:
    MinVector<T> coef;
    T interception_;
private:
    MinVector<T> _theta;
    Numpy_Cpp<T> np;

public:
    LinearRegression() {

    }

    LinearRegression fit_normal(MinMatrix<T> X_train, MinVector<T> y_train) {
        assert(X_train.size() == y_train._size());

        auto X_b = MinMatrix<T>().ones(X_train.size(),
                                               X_train.col_num() + 1);

        auto col_size = X_train.col_num();
        for (int i = 0; i < col_size; ++i) {
            X_b.col_value_Change(i + 1, X_train.col_vector(i));
        }

        auto one = MinMatrix<T>(1,y_train);

        X_b = inv(X_b._T().dot(X_b)).dot(X_b._T()).dot(one._T());


        this->_theta = X_b.col_vector(0);

        this->interception_ = this->_theta[0];

        this->coef = this->_theta._slice_vec(1, this->_theta._size());

        return *this;
    }

    MinVector<T> predict(MinMatrix<T> X_predict) {
        assert(X_predict.shape()[1] == this->coef._size());

        MinMatrix<T> X_b = MinMatrix<T>().ones(X_predict.size(),
                                               X_predict.col_num() + 1);
        auto col_size = X_predict.col_num();
        for (int i = 0; i < col_size; ++i) {
            X_b.col_value_Change(i + 1, X_predict.col_vector(i));
        }

        MinMatrix<T> t(this->_theta._size(), this->_theta);

        return X_b.dot(t._T()).col_vector(0);

    }

    T score(MinMatrix<T> x_test, MinVector<T> y_test) {
        auto y_predict = this->predict(x_test);
        return r2_score(y_predict, y_test);

    }
};



#endif //NEW_ML_CPP_SIMP_LINEAR_REG_H
