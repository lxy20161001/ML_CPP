//
// Created by john on 2018-8-24.
//

#ifndef ML_CPP_ML_ANG_H
#define ML_CPP_ML_ANG_H

#include <iostream>
#include <vector>
#include <tuple>
#include "Numpy_Cpp.h"
#include "StandardScaler.h"
#include "data/dataSet.h"

using namespace std;

template <typename T>
class Knn_Ang{
private:
    Numpy_Cpp<T> np;
    MinVector<T> x;
    MinMatrix<T> X_train;
    MinVector<T> Y_train;
public:
    int k = 0;
    Knn_Ang(){

    }

    explicit Knn_Ang(int k){
        assert(k>=1);
        this->k = k;
    }

    ~Knn_Ang(){

    }

    Knn_Ang fit(vector<vector<T>> x_train, vector<T> y_train){
        assert(x_train.size() == y_train.size());
        assert(this->k <= x_train.size());
        X_train=MinMatrix<T>(x_train);
        Y_train=MinVector<T>(y_train);
        return *this;
    }

    Knn_Ang fit(MinMatrix<T> x_train, MinVector<T> y_train){
        assert(x_train.size() == y_train.len());
        assert(this->k <= x_train.size());
        int size = x_train.size();
        for(int i = 0; i < size ;++i){
            X_train.addMinVector(x_train[i]);
        }
        this->Y_train = MinVector<T>(y_train);
        return *this;
    }

    friend ostream &operator<<(ostream &out, Knn_Ang ml_ang) {

        out << "KNN(k=";
        out << ml_ang.k;

        out << ")";
        return out;
    }


    MinVector<T> predict(vector<vector<T>> X_predict){
        assert(X_train.size()!=0 && Y_train.len()!=0);
        assert(X_predict[0].size() == this->X_train[0].len());

        vector<T> y_predict;
        auto size = X_predict.size();
        for(int i = 0; i < size;++i){
            y_predict.push_back(KNN_SINGLE(X_predict[i]));
        }
        return np.array(y_predict);
    }

    MinVector<T> predict(MinMatrix<T> X_predict){
        assert(X_train.size()!=0 && Y_train.len()!=0);
        assert(X_predict[0].len() == this->X_train[0].len());


        auto size = X_predict.size();
        vector<T> y_predict(static_cast<unsigned int>(size));

        for(int i = 0; i < size;++i){
            y_predict[i]=KNN_SINGLE(X_predict[i]);
        }
        return MinVector<T>(y_predict);
    }

private:
    T KNN_SINGLE(vector<T> xt){
        assert(xt.size() == X_train[0].len());
        x = MinVector<T>(xt);
        np = Numpy_Cpp<T>(X_train,Y_train);
        vector<T> distances;
        auto size = X_train.size();
        for(int i = 0 ; i<size;++i){
            distances.push_back(X_train[i].euc_distance2(x));

        }
        MinVector<T> nearest = np.MatchNum(np.argSort(MinVector<T>(distances)),Y_train);
        return Add_to_RbTree(nearest,this->k).sorted()[0][1];
    }



    T KNN_SINGLE(MinVector<T> x) {
        assert(x.len() == X_train[0].len());
        np = Numpy_Cpp<T>(X_train, Y_train);
        vector<T> distances;

        auto size = X_train.size();
        for (int i = 0; i < size; ++i) {
            distances.push_back(X_train[i].euc_distance2(x));
        }
        auto nearest = np.MatchNum(np.argSort(MinVector<T>(distances)), Y_train);
        return Add_to_RbTree(nearest, this->k).sorted()[0][1];
    }
    
private:

    MinMatrix<T> Add_to_RbTree(MinVector<T> nearest,int k){
        RBtree<T,T> rBtree;
        double ret = 0.0;
        for (int i = 0; i < k; ++i) {
            ret = nearest[i];

            if (rBtree.contains(ret)) {
                rBtree.set(ret, rBtree.get(ret) + 1);
            } else {
                rBtree.add(ret, 1);
            }
        }
        return MinMatrix<T>(rBtree.PreOrder());
    }



public:
    tuple<MinMatrix<T>,MinMatrix<T>,MinVector<T>,MinVector<T>>  train_test_split(MinMatrix<T> X,MinVector<T> y, T test_ratio = 0.2){
        assert(X.shape()[0] == y.len());

        MinVector<T> shuffle_indexes = np.shuffle_indexes(X.size());

        auto test_size = int(X.size()*test_ratio);

        MinVector<T> test_indexes = np.test_indexes(shuffle_indexes,0,test_size);

        MinVector<T> train_indexes = np.train_indexes(shuffle_indexes,test_size,shuffle_indexes.len());


        MinMatrix<T> X_train = X.indexFancy(train_indexes,X);
        MinMatrix<T> X_test = X.indexFancy(test_indexes,X);
        MinVector<T> Y_train = y.indexFancy(train_indexes,y);
        MinVector<T> Y_test = y.indexFancy(test_indexes,y);

        tuple<MinMatrix<T>,MinMatrix<T>,MinVector<T>,MinVector<T>> newT;
        newT = make_tuple(X_train,X_test,Y_train,Y_test);


        return newT;
    }

    tuple<MinVector<T>,MinVector<T>,MinVector<T>,MinVector<T>>  train_test_split(MinVector<T> X,MinVector<T> y, T test_ratio = 0.2){
        assert(X.len() == y.len());

        MinVector<T> shuffle_indexes = np.shuffle_indexes(X.len());

        auto test_size = int(X.len()*test_ratio);
        auto train_size = X.len() - test_size;


        MinVector<T> test_indexes = np.test_indexes(shuffle_indexes,0,test_size);
        MinVector<T> train_indexes = np.train_indexes(shuffle_indexes,test_size,shuffle_indexes.len());


        MinVector<T> X_train = X.indexFancy(train_indexes,X);

        MinVector<T> X_test = X.indexFancy(test_indexes,X);

        MinVector<T> Y_train = y.indexFancy(train_indexes,y);

        MinVector<T> Y_test = y.indexFancy(test_indexes,y);


        tuple<MinVector<T>,MinVector<T>,MinVector<T>,MinVector<T>> newT;
        newT = make_tuple(X_train,X_test,Y_train,Y_test);


        return newT;
    }


    T sum(MinVector<T> A,MinVector<T> B){
        assert(A.len() == B.len());
        T ret;
        auto size = A.len();
        for( int i = 0; i < size; ++i){
            if(A[i] == B[i]){
                ret+=1;
            }
        }
        return ret;
    }

    T Test_Res(MinVector<T> A,MinVector<T> Test){
        assert(A.len() == Test.len());
        T ret;
        auto size = A.len();
        for( int i = 0; i < size; ++i){
            if(A[i] == Test[i]){
                ret+=1;
            }
        }
        return ret/Test.len();
    }

    T Socore(MinMatrix<T> x,MinVector<T> y){
        auto Mix = train_test_split(x,y,0.2);
        MinMatrix<double> X_train = get<0>(Mix);
        MinMatrix<double> X_test = get<1>(Mix);
        MinVector<double> Y_train = get<2>(Mix);
        MinVector<double> Y_test = get<3>(Mix);

        Numpy_Cpp<double> np;
        MinVector<double> a = np.argSort(Y_test);
        auto go = fit(X_train,Y_train);
        cout<<go<<endl;
        MinVector<double> predict_y = go.predict(X_test);
        double t = go.Test_Res(predict_y,Y_test);
        return t;
        //return (X_train.size());
    }

    void best_k(){
        dataSet datasets;

        auto x = MinMatrix<double>(datasets.load_digits_data());
        auto y = MinVector<double>(datasets.load_digits_target());

        StandardScaler<double> scaler;
        auto fit = scaler.fit(x);
        auto X = fit.tranform(x);

        T best_socore = 0.0;
        int bestK = -1;

        for(int i = 1; i < 5; ++i){
            Knn_Ang<T> ml_ang(i);
            auto bS = ml_ang.Socore(X,y);
            if(bS>best_socore){
                best_socore = bS;
                bestK = i;
            }

        }

        cout<<"Best_K  "<<bestK<<endl;
        cout<<"BestS   "<<best_socore<<endl;
    }






#endif //ML_CPP_ML_ANG_H
